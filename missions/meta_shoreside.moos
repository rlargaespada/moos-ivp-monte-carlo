//*******************************************************
// definitions

// uEvalPlanner - Planner interface
#define PATH_REQUEST_VAR PLAN_PATH_REQUESTED
#define PATH_STATS_VAR PATH_STATS
#define PATH_COMPLETE_VAR PATH_COMPLETE
#define PATH_FAILED_VAR PATH_FAILED

// Shoreside - Helm Interface
#define STATION_START_UPDATES_VAR STATION_START_UPDATES

// obstacle sim refresh config
#define OBS_REFRESH_INTERVAL 100
#define OBS_MIN_DURATION 120
#define OBS_MAX_DURATION 180

#define NUM_OBS_DRIFTING 1

#define IRIS_TESTING false


//*******************************************************
// ShoreSide Configuration File

ServerHost = $(IP_ADDR)
ServerPort = $(SHORE_MOOSDB)
Community  = shoreside

#include plug_origin_warp.moos

//--------------------------------------------------------
Processconfig = ANTLER
{
  MSBetweenLaunches = 200

  Run = MOOSDB                @ NewConsole = false
  Run = pRealm                @ NewConsole = false
  #ifdef GUI true
  Run = pMarineViewer         @ NewConsole = false
  #endif
  // Run = uXMS                  @ NewConsole = true

  // Run = pLogger               @ NewConsole = false
  Run = uProcessWatch         @ NewConsole = false
  Run = uLoadWatch            @ NewConsole = false

  Run = pShare                @ NewConsole = false
  Run = pHostInfo             @ NewConsole = false
  Run = uFldShoreBroker       @ NewConsole = false

  Run = uFldObsMonteCarloSim  @ NewConsole = false ~ uFldObsMonteCarloSim_CONSTANT
  Run = uFldObsMonteCarloSim  @ NewConsole = false ~ uFldObsMonteCarloSim_KNOWN
  Run = uFldObsMonteCarloSim  @ NewConsole = false ~ uFldObsMonteCarloSim_UNKNOWN

  Run = uFldCollObDetect      @ NewConsole = false
  Run = uFldPathCheck         @ NewConsole = false

  Run = uEvalPlanner          @ NewConsole = false

  #ifdef DRIFT_TYPE random
  Run = uTimerScript          @ NewConsole = false ~ uTimerScript_RANDOM_DRIFT
  #endif
  #ifdef WIND_TYPE random
  Run = uTimerScript          @ NewConsole = false ~ uTimerScript_RANDOM_WIND
  #endif
}


//------------------------------------------
// pMarineViewer config block
ProcessConfig = pMarineViewer
{
  AppTick = 4
  CommsTick = 4

  // BackView Options
  tiff_file            = $(TIFF_FILE)
  set_pan_x            = $(PMV_PAN_X)
  set_pan_y            = $(PMV_PAN_Y)
  zoom                 = $(PMV_ZOOM)
  vehicle_shape_scale  = 1.5

  // BackView Pull-Down Menu
  hash_delta           = 50
  hash_shade           = 0.22
  hash_viewable        = true

  // GeoAttributes Pull-Down Menu
  // use all defaults

  // Vehicles Pull-Down Menu
  // use all defaults

  // InfoCasting Pull-Down Menu
  appcast_height       = 75
  appcast_width        = 30
  appcast_viewable     = true
  appcast_color_scheme = indigo
  nodes_font_size      = xlarge
  procs_font_size      = xlarge
  appcast_font_size    = large

  // Context Pull-Down Menu
  #ifdef IRIS_TESTING true
  left_context[IRIS_TESTING] = IRIS_SEED_POINT_ALL = "x=$[XPOS], y=$[YPOS]"
  #endif
  left_context[$(V1_NAME)_START_GOAL] = UEP_START_POS = "vname=$(V1_NAME), x=$[XPOS], y=$[YPOS]"
  left_context[$(V1_NAME)_START_GOAL] = $(STATION_START_UPDATES_VAR)_%(V1_NAME) = "station_pt=$[XPOS],$[YPOS]"
  right_context[$(V1_NAME)_START_GOAL] = UEP_GOAL_POS = "vname=$(V1_NAME), x=$[XPOS], y=$[YPOS]"

  // Exclusion Filter
  // leave empty

  // MOOS-Scope Pull-Down Menu
  scope = PHI_HOST_INFO
  scope = MVIEWER_LCLICK
  scope = MVIEWER_RCLICK
  scope = UEP_START_POS
  scope = UEP_GOAL_POS
  scope = UPC_ODOMETRY_REPORT
  scope = UPC_SPEED_REPORT

  // Action Pull-Down Menu
  // no actions for now, just use buttons

  // Button Configuration
  #ifdef IRIS_TESTING true
  button_one = RUN_IRIS # IRIS_SEED_POINT_ALL = $(START_POS) # IRIS_SEED_POINT_ALL = $(GOAL_POS)
  button_one = RUN_IRIS # RUN_IRIS_ALL=now
  button_two = CLEAR_IRIS # CLEAR_IRIS_ALL=now
  button_three = RESET_OBS # RESET_KNOWN_OBSTACLES=now # RESET_UNKNOWN_OBSTACLES=now
  button_four = RUN_IRIS_NO_SEED # RUN_IRIS_ALL=now
  #else
  button_one = LAUNCH_SIM # DEPLOY_ALL=true # MOOS_MANUAL_OVERRIDE_ALL=false
  button_one = RESET_SIM_REQUESTED=all
  button_two = END_SIM # DEPLOY_ALL=false # END_SIM_REQUESTED=all

  button_three = RESET_SIM # RESET_SIM_REQUESTED=all
  button_four = RESET_TRIAL # RESET_TRIAL_REQUESTED=all
  button_five = SKIP_TRIAL # SKIP_TRIAL_REQUESTED=all
  #endif
}


//------------------------------------------
// pLogger config block
ProcessConfig = pLogger
{
  AppTick       = 5
  CommsTick     = 5

  SyncLog       = true @ 0.2
  AsyncLog      = true

  File = MOOSLog_SHORESIDE
  FileTimeStamp = false  // false while developing

  WildCardLogging = true

  WildCardOmitPattern = *_STATUS
  WildCardOmitPattern = APPCAST
  WildCardOmitPattern = DB_VARSUMMARY
  WildCardOmitPattern = DB_RWSUMMARY
}


//------------------------------------------
// uXMS config block
ProcessConfig = uXMS
{
  AppTick       = 1
  CommsTick     = 1

  display_source = true
  display_time = true
  display_community = true

  var = DEPLOY_ALL, MOOS_MANUAL_OVERRIDE_ALL

  // process watch
  var = PROC_WATCH_SUMMARY

  //load watch
  var = LOAD_WARNING
  var = ULW_BREACH, ULW_BREACH_COUNT, ULW_BREACH_LIST
  var = ULW_NEAR_BREACH, ULW_NEAR_BREACH_COUNT, ULW_NEAR_BREACH_LIST

  // obstacle sims
  var = RESET_KNOWN_OBSTACLES, RESET_UNKNOWN_OBSTACLES
  var = NEW_OBSTSACLE_FILE_KNOWN, NEW_OBSTSACLE_FILE_UNKNOWN

  //collision detection
  var = COLLISION_ALERT, NEAR_MISS_ALERT, ENCOUNTER_ALERT

  // path check
  var = UPC_ODOMETRY_REPORT

  // eval planner
  var = TRIALS_COMPLETED
  var = RESET_SIM_REQUESTED, END_SIM_REQUESTED
  var = RESET_TRIAL_REQUESTED, SKIP_TRIAL_REQUESTED
  var = $(PATH_REQUEST_VAR), $(PATH_COMPLETE_VAR)
  var = UEP_START_POS, UEP_GOAL_POS
  var = TRIAL_STATS

  // vehicle updates
  // var = BHV_WARNING_%(V1_NAME)
  // var = DESIRED_HEADING_%(V1_NAME), DESIRED_SPEED_%(V1_NAME)
  // var = DIST_TO_STATION_%(V1_NAME)
  // var = IVPHELM_ALLSTOP_%(V1_NAME), IVPHELM_STATE_%(V1_NAME)
  // var = IVPHELM_BHV_ACTIVE_%(V1_NAME), IVPHELM_BHV_IDLE_%(V1_NAME), IVPHELM_BHV_RUNNING_%(V1_NAME)
  // var = LOAD_WARNING_%(V1_NAME)
  // var = MODE_%(V1_NAME)
  // var = MOOS_DEBUG_%(V1_NAME)
  // var = NAV_X_%(V1_NAME), NAV_Y_%(V1_NAME), NAV_SPEED_%(V1_NAME), NAV_HEADING_%(V1_NAME)
  // var = OBM_MIN_DIST_EVER_%(V1_NAME)
  // var = OUT_OF_BOUNDS_%(V1_NAME)
  // var = PROC_WATCH_ALL_OK_%(V1_NAME), PROC_WATCH_SUMMARY_%(V1_NAME)
}


//------------------------------------------
// uProcessWatch config block
ProcessConfig = uProcessWatch
{
  AppTick   = 1
  CommsTick = 1

  watch_all = true
  summary_wait = 60
  nowatch = uXMS*
  nowatch = uPokeDB*
  nowatch   = uQueryDB*
  nowatch   = uMAC*
}


//------------------------------------------
// uLoadWatch config block
ProcessConfig = uLoadWatch
{
  AppTick   = 2
  CommsTick = 2

  thresh = app=any, gapthresh=2.0

  near_breach_thresh = 0.9  // default

  breach_trigger = 1    // default (first offense forgiven)
}


#include plug_pShare.moos

#include plug_pHostInfo.moos

//------------------------------------------
// uFldShoreBroker config block
ProcessConfig = uFldShoreBroker
{
  AppTick       = 4
  CommsTick     = 4

  // Note: [QBRIDGE = FOO]  is shorthand for
  //       [BRIDGE = src=FOO_$V,  alias=FOO] and
  //       [BRIDGE = src=FOO_ALL, alias=FOO]

  qbridge = DEPLOY
  qbridge = MOOS_MANUAL_OVERRIDE, APPCAST_REQ
  qbridge = USM_SIM_PAUSED
  qbridge = TRACKED_FEATURE

  qbridge = USM_RESET
  qbridge = $(PATH_REQUEST_VAR)
  qbridge = $(STATION_START_UPDATES_VAR)
  bridge = src=GIVEN_OBSTACLE
  bridge = src=DRIFT_VECTOR
  bridge = src=DRIFT_VECTOR_ADD
  bridge = src=WIND_VECTOR, alias=DRIFT_VECTOR
  bridge = src=WIND_VECTOR_ADD, alias=DRIFT_VECTOR_ADD
  qbridge = IRIS_SEED_POINT
  qbridge = RUN_IRIS
  qbridge = CLEAR_IRIS
}


//--------------------------------------------------
// uFldObsMonteCarloSim_CONSTANT config block
ProcessConfig = uFldObsMonteCarloSim_CONSTANT
{
  AppTick       = 1
  CommsTick     = 1

  obstacle_file = $(OBS_CONST_FILE)
  post_visuals = $(GUI)

  // parameters to draw constant obstacles
  poly_vert_color = sandybrown
  poly_edge_color = sandybrown
  poly_fill_color = chocolate
  poly_label_color = white

  poly_vert_size = 1
  poly_edge_size = 1
  poly_transparency = 0.15

  // obstacle region is whole map, so no need to draw
  draw_region = false

  // vehicle knows about constant obstacles, so post polygons
  post_points = false

  // obstacle repost configuration
  min_duration = $(OBS_MIN_DURATION)
  max_duration = $(OBS_MAX_DURATION)
  refresh_interval = $(OBS_REFRESH_INTERVAL)

  // obstacle reset configuration
  // for constant obstacles, don't want obstacles to reset
  reset_var = none  // disable reset requests

  num_drifting_obs = 0
}


//--------------------------------------------------
// uFldObsMonteCarloSim_KNOWN config block
ProcessConfig = uFldObsMonteCarloSim_KNOWN
{
  AppTick       = 1
  CommsTick     = 1

  #ifdef USE_BENCHMARK true
  obstacle_file = $(OBS_KNOWN_FILE)_0.txt
  #else
  obstacle_file = $(OBS_KNOWN_FILE)
  #endif

  post_visuals = $(GUI)
  label_prefix = known
  obstacle_file_var = NEW_OBSTACLE_FILE_KNOWN

  // parameters to draw known obstacles
  poly_vert_color = royalblue
  poly_edge_color = royalblue
  poly_fill_color = cornflowerblue
  // poly_label_color = invisible
  poly_label_color = white

  poly_vert_size = 1
  poly_edge_size = 1
  poly_transparency = 0.15

  // parameters to draw obstacle region
  draw_region = true
  region_vert_color = hotpink
  region_edge_color = hotpink

  // vehicle knows about known obstacles, so post polygons
  post_points = false

  // obstacle repost configuration
  min_duration = $(OBS_MIN_DURATION)
  max_duration = $(OBS_MAX_DURATION)
  refresh_interval = $(OBS_REFRESH_INTERVAL)

  // obstacle reset configuration
  // reset_interval = -1  // disable timed resets
  reset_var = RESET_KNOWN_OBSTACLES
  reset_range = 10
  reuse_ids = true

  num_drifting_obs = $(NUM_OBS_DRIFTING)
  drift_vector = 0,0
}


//--------------------------------------------------
// uFldObsMonteCarloSim_UNKNOWN config block
ProcessConfig = uFldObsMonteCarloSim_UNKNOWN
{
  AppTick       = 1
  CommsTick     = 1

  #ifdef USE_BENCHMARK true
  obstacle_file = $(OBS_UNKNOWN_FILE)_0.txt
  #else
  obstacle_file = $(OBS_UNKNOWN_FILE)
  #endif

  post_visuals = $(GUI)
  label_prefix = unknown
  obstacle_file_var = NEW_OBSTACLE_FILE_UNKNOWN

  // parameters to draw known obstacles
  poly_vert_color = forestgreen
  poly_edge_color = forestgreen
  poly_fill_color = chartreuse
  // poly_label_color = invisible
  poly_label_color = white

  poly_vert_size = 1
  poly_edge_size = 1
  poly_transparency = 0.15

  // parameters to draw obstacle region
  draw_region = false
  region_vert_color = hotpink
  region_edge_color = hotpink

  // vehicle doesn't know about unknown obstacles, so post points
  post_points = true
  rate_points = 5
  point_size = 5

  // obstacle repost configuration
  min_duration = $(OBS_MIN_DURATION)
  max_duration = $(OBS_MAX_DURATION)
  refresh_interval = $(OBS_REFRESH_INTERVAL)

  // obstacle reset configuration
  // reset_interval = -1  // disable timed resets
  reset_var = RESET_UNKNOWN_OBSTACLES
  reset_range = 10
  reuse_ids = true

  num_drifting_obs = $(NUM_OBS_DRIFTING)
  drift_vector = 0,0

  sensor_range = 50
}


//------------------------------------------
// uFldCollObDetect config block
ProcessConfig = uFldCollObDetect
{
  AppTick   = 4
  CommsTick = 4

  collision_dist   = 1
  near_miss_dist   = 10
  encounter_dist   = 20

  // post encounter info
  collision_flag   = COLLISION_ALERT = vname=$VNAME, obs=$ID, dist=$DIST, total_count=$COLL_CNT
  near_miss_flag   = NEAR_MISS_ALERT = vname=$VNAME, obs=$ID, dist=$DIST, total_count=$MISS_CNT
  encounter_flag   = ENCOUNTER_ALERT = vname=$VNAME, obs=$ID, dist=$DIST, total_count=$ENC_CNT
}


//------------------------------------------
// uFldPathCheck config block

ProcessConfig = uFldPathCheck
{
  AppTick       = 4
  CommsTick     = 4
}


//------------------------------------------
// uEvalPlanner config block

ProcessConfig = uEvalPlanner
{
  AppTick       = 4
  CommsTick     = 4

  vehicle_name = $(V1_NAME)
  timeout = 300
  start_pos = $(START_POS)
  goal_pos = $(GOAL_POS)
  heading_on_reset = $(HDG_ON_RESET)

  path_request_var = $(PATH_REQUEST_VAR)
  path_stats_var = $(PATH_STATS_VAR)
  path_complete_var = $(PATH_COMPLETE_VAR)
  path_failed_var = $(PATH_FAILED_VAR)

  num_trials = $(NUM_TRIALS)

  end_trial_on_collision = false  // set to true when running final trials
  endflag = DEPLOY_%(V1_NAME)=false

  // obs reset config
  #ifdef USE_BENCHMARK true
  obs_reset_var = NEW_OBSTACLE_FILE_KNOWN=$(OBS_KNOWN_FILE)_$[IX].txt
  obs_reset_var = NEW_OBSTACLE_FILE_UNKNOWN=$(OBS_UNKNOWN_FILE)_$[IX].txt

  endflag = NEW_OBSTACLE_FILE_KNOWN=$(OBS_KNOWN_FILE)_0.txt  // reset to first file
  endflag = NEW_OBSTACLE_FILE_UNKNOWN=$(OBS_UNKNOWN_FILE)_0.txt  // reset to first file
  #else
  obs_reset_var = RESET_KNOWN_OBSTACLES
  obs_reset_var = RESET_UNKNOWN_OBSTACLES

  endflag = RESET_KNOWN_OBSTACLES=now  // reset obstacles when session is done
  endflag = RESET_UNKNOWN_OBSTACLES=now  // reset obstacles when session is done
  #endif

  // drift and wind vector config
  #ifdef DRIFT_TYPE random
  initflag = SEND_RANDOM_DRIFT=true  // start timerscript
  endflag = DRIFT_VECTOR=0,0  // stop drift at end of session
  #elseifdef DRIFT_TYPE given
  initflag = DRIFT_VECTOR_ADD=$(DRIFT_VEC)
  endflag = DRIFT_VECTOR=0,0  // stop drift at end of session
  #endif

  #ifdef WIND_TYPE random
  initflag = SEND_RANDOM_WIND=true  // start timerscript
  endflag = WIND_VECTOR=0,0  // stop wind at end of session
  #elseifdef WIND_TYPE given
  initflag = WIND_VECTOR_ADD=$(WIND_VEC)
  endflag = WIND_VECTOR=0,0  // stop wind at end of session
  #endif

  // export config
  file = $(EXPORT_FILE)
  use_timestamp = false
}


ProcessConfig = uTimerScript_RANDOM_DRIFT
{
  AppTick   = 2
  CommsTick = 2
  condition = SEND_RANDOM_DRIFT=true
  paused        = false
  reset_max     = unlimited
  reset_time    = end
  script_name   = RANDOM_DRIFT
  script_atomic = false
  upon_awake = restart

  randvar = varname=ANG, min=0,   max=359, key=at_reset
  randvar = varname=MAG, min=0, max=1, key=at_reset

  event = var=DRIFT_VECTOR_ADD, val="$[ANG],$[MAG]", time=0
  event = var=SEND_RANDOM_DRIFT, val="false", time=1
}


ProcessConfig = uTimerScript_RANDOM_WIND
{
  AppTick   = 2
  CommsTick = 2
  condition = SEND_RANDOM_WIND=true
  paused        = false
  reset_max     = unlimited
  reset_time    = end
  script_name   = RANDOM_WIND
  script_atomic = false
  upon_awake = restart

  randvar = varname=ANG, min=0,   max=359, key=at_reset
  randvar = varname=MAG, min=0, max=1, key=at_reset

  event = var=DRIFT_VECTOR_ADD, val="$[ANG],$[MAG]", time=0
  event = var=SEND_RANDOM_WIND, val="false", time=1
}
